---
export interface Props {
	subtitle?: string;
}

import '@assets/styles/main.css';

import i18next, { t } from "i18next";
import { LanguageSelector, HeadHrefLangs  } from "astro-i18next/components";

import Alert from "@components/Alert.vue";
import Navbar from "@components/layout/Navbar.vue";
import Footer from "@components/layout/Footer.astro";
import ConfirmationModal from "@components/modals/ConfirmationModal.vue";

import {APP_NAME} from "@utils/constants";

//const ip = Astro.clientAddress;
const { subtitle = '' } = Astro.props as Props;
const full_title = APP_NAME + ( subtitle ? ' | ' + subtitle : '' );
---

<!DOCTYPE html>
<html lang={i18next.language} class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="theme-color" content="#000000" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<title>{full_title}</title>
		<HeadHrefLangs/>

		<link
		  rel="stylesheet"
		  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
		/>

	</head>
	<body class="relative flex flex-col min-h-screen antialiased text-gray-800" id="app">

		<Alert client:only="vue"/>
		
		<Navbar client:visible
			submitButton={ t("layout.navbar.submit") }
			indexButton={ t("layout.navbar.index") }
		/>

		<main class="flex-1 bg-secondary-100">

			<slot/>

		</main>

		<Footer
			title={ t("layout.footer.title") }
			subtitle={ t("layout.footer.subtitle") }
			firstMenu={ t("layout.footer.first-menu") }
			secondMenu={ t("layout.footer.second-menu") }
			termsLabel={ t("layout.footer.menu-items.terms") }
			privacyLabel={ t("layout.footer.menu-items.privacy") }
			contactsLabel={ t("layout.footer.menu-items.contacts") }
		>
			<LanguageSelector class="bg-transparent text-sm outline-none border-none"
				showFlag={false} 
			/>
		</Footer>

		<slot name="modals"/>

		<ConfirmationModal client:only="vue"/>
		
	</body> 

	<script is:inline>
		document.notify = function notify(type,message)
		{
			const alertObject = {
				type : type,
				message : message,
			};
			document.dispatchEvent( new CustomEvent('alert',  { "detail": alertObject }) );
		}
	</script>

</html>
